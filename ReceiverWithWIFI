

#include <ESP8266WiFi.h>

#include <IRremoteESP8266.h>

int RECV_PIN = 2; //an IR detector/demodulatord is connected to GPIO pin 2 (PIN 4)

IRrecv irrecv(RECV_PIN);

decode_results results;
const int led = LED_BUILTIN; //Usaremos el pin interno, que se encenderá cuando detectemos señal.

const char* ssid = "SSID";
const char* password = "PASS";

int val;
// Create an instance of the server
// specify the port to listen on as an argument
WiFiServer server(80);

void setup() {
  Serial.begin(115200);
  delay(10);
  val = 0;
  // prepare GPIO2
  pinMode(led, OUTPUT);
  digitalWrite(led, 0);
  irrecv.enableIRIn(); // Start the receiver
  // Connect to WiFi network
  Serial.println();
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);
  
  WiFi.begin(ssid, password);
  
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected");
  
  // Start the server
  server.begin();
  Serial.println("Server started");

  // Print the IP address
  Serial.println(WiFi.localIP());
}

void loop() {

if (irrecv.decode(&results)) {
    Serial.println(results.value, HEX);
    irrecv.resume(); // Receive the next value

if (results.value == 2704)
        {
          val = val +1;
          Serial.print ("Recibido disparo de la arma numero 1 tiros recibidos ");
          Serial.println (val);
        }

    
    digitalWrite(led, HIGH);
}


  
  // Check if a client has connected
  WiFiClient client = server.available();
  if (!client) {
    return;
  }
  
  // Wait until the client sends some data
  Serial.println("new client");
  while(!client.available()){
    delay(1);
  }
  
  // Read the first line of the request
  String req = client.readStringUntil('\r');
  Serial.println(req);
  client.flush();
  
  // Match the request
  
  if (req.indexOf("/pistola") != -1)
    {val ;
       // Prepare the response
  String s = "HTTP/1.1 200 OK\r\nContent-Type: text/html\r\n\r\n<!DOCTYPE HTML>\r\n<html>\r\nNum tiros recibidos ";
     s += val;

  // Send the response to the client
  client.print(s);


    }
    else {
    Serial.println("invalid request");
    client.stop();
    return;
  }

  // Set GPIO2 according to the request
  digitalWrite(led, val);
  
  client.flush();

 
  delay(1);
  Serial.println("Client disonnected");

  // The client will actually be disconnected 
  // when the function returns and 'client' object is detroyed
}
